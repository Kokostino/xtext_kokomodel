/*
 * generated by Xtext 2.25.0
 */
package koko.logmodel.serializer;

import com.google.inject.Inject;
import java.util.Set;
import koko.logmodel.services.LogDslGrammarAccess;
import kokoworld.kokolog.KokologPackage;
import kokoworld.kokolog.LogDocument;
import kokoworld.kokolog.LogMember;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LogDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LogDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KokologPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KokologPackage.LOG_DOCUMENT:
				sequence_LogDocument(context, (LogDocument) semanticObject); 
				return; 
			case KokologPackage.LOG_MEMBER:
				sequence_LogMember(context, (LogMember) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     LogDocument returns LogDocument
	 *
	 * Constraint:
	 *     (name=QName baseentities+=LogMember)
	 */
	protected void sequence_LogDocument(ISerializationContext context, LogDocument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogMember returns LogMember
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_LogMember(ISerializationContext context, LogMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KokologPackage.Literals.LOG_MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KokologPackage.Literals.LOG_MEMBER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogMemberAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
